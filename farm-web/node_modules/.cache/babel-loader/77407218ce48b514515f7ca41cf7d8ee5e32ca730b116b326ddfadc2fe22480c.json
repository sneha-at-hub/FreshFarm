{"ast":null,"code":"var _jsxFileName = \"/Users/sneha/Downloads/FreshFarmApp (1) 2/FreshFarmApp/farm-web/src/Pages/Dashboard/TopFarmersBarChart.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport Chart from 'chart.js/auto';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TopFarmersBarChart = ({\n  data\n}) => {\n  _s();\n  const chartRef = useRef();\n  const chartInstance = useRef(null);\n  useEffect(() => {\n    if (data && data.length > 0) {\n      if (chartInstance.current !== null) {\n        chartInstance.current.destroy(); // Destroy the existing chart instance\n      }\n      const labels = data.map(farmer => farmer.name);\n      const values = data.map(farmer => farmer.sales);\n      const ctx = chartRef.current.getContext('2d');\n\n      // Generate shades of green for background colors\n      const backgroundColors = generateShadesOfGreen(data.length);\n      chartInstance.current = new Chart(ctx, {\n        type: 'bar',\n        data: {\n          labels: labels,\n          datasets: [{\n            label: 'Sales',\n            data: values,\n            backgroundColor: backgroundColors,\n            borderColor: '#4CAF50',\n            // Darker green for borders\n            borderWidth: 1\n          }]\n        },\n        options: {\n          indexAxis: 'y',\n          responsive: true,\n          maintainAspectRatio: false,\n          animation: {\n            duration: 1000,\n            easing: 'easeInOutQuad'\n          },\n          scales: {\n            x: {\n              beginAtZero: true,\n              ticks: {\n                precision: 0,\n                font: {\n                  size: 12\n                }\n              },\n              grid: {\n                display: false // Remove x-axis grid lines\n              }\n            },\n            y: {\n              ticks: {\n                font: {\n                  size: 12\n                }\n              },\n              grid: {\n                display: false // Remove y-axis grid lines\n              }\n            }\n          },\n          plugins: {\n            legend: {\n              labels: {\n                font: {\n                  size: 14\n                }\n              }\n            }\n          }\n        }\n      });\n    }\n  }, [data]);\n\n  // Function to generate shades of green\n  const generateShadesOfGreen = count => {\n    const colors = [];\n    for (let i = 0; i < count; i++) {\n      const shade = i * (255 / count); // Adjust the shade based on the count\n      colors.push(`rgba(0, ${shade}, 0, 0.7)`); // Adjust the alpha for transparency\n    }\n    return colors;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: '100%',\n      height: '200px'\n    },\n    children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: chartRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this);\n};\n_s(TopFarmersBarChart, \"u5+iHnwD4hjVcMuzTE/TbI78erc=\");\n_c = TopFarmersBarChart;\nexport default TopFarmersBarChart;\nvar _c;\n$RefreshReg$(_c, \"TopFarmersBarChart\");","map":{"version":3,"names":["React","useEffect","useRef","Chart","jsxDEV","_jsxDEV","TopFarmersBarChart","data","_s","chartRef","chartInstance","length","current","destroy","labels","map","farmer","name","values","sales","ctx","getContext","backgroundColors","generateShadesOfGreen","type","datasets","label","backgroundColor","borderColor","borderWidth","options","indexAxis","responsive","maintainAspectRatio","animation","duration","easing","scales","x","beginAtZero","ticks","precision","font","size","grid","display","y","plugins","legend","count","colors","i","shade","push","style","width","height","children","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/sneha/Downloads/FreshFarmApp (1) 2/FreshFarmApp/farm-web/src/Pages/Dashboard/TopFarmersBarChart.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport Chart from 'chart.js/auto';\n\nconst TopFarmersBarChart = ({ data }) => {\n  const chartRef = useRef();\n  const chartInstance = useRef(null);\n\n  useEffect(() => {\n    if (data && data.length > 0) {\n      if (chartInstance.current !== null) {\n        chartInstance.current.destroy(); // Destroy the existing chart instance\n      }\n\n      const labels = data.map(farmer => farmer.name);\n      const values = data.map(farmer => farmer.sales);\n\n      const ctx = chartRef.current.getContext('2d');\n\n      // Generate shades of green for background colors\n      const backgroundColors = generateShadesOfGreen(data.length);\n\n      chartInstance.current = new Chart(ctx, {\n        type: 'bar',\n        data: {\n          labels: labels,\n          datasets: [{\n            label: 'Sales',\n            data: values,\n            backgroundColor: backgroundColors,\n            borderColor: '#4CAF50', // Darker green for borders\n            borderWidth: 1\n          }]\n        },\n        options: {\n          indexAxis: 'y',\n          responsive: true,\n          maintainAspectRatio: false,\n          animation: {\n            duration: 1000,\n            easing: 'easeInOutQuad'\n          },\n          scales: {\n            x: {\n              beginAtZero: true,\n              ticks: {\n                precision: 0,\n                font: {\n                  size: 12\n                }\n              },\n              grid: {\n                display: false // Remove x-axis grid lines\n              }\n            },\n            y: {\n              ticks: {\n                font: {\n                  size: 12\n                }\n              },\n              grid: {\n                display: false // Remove y-axis grid lines\n              }\n            }\n          },\n          plugins: {\n            legend: {\n              labels: {\n                font: {\n                  size: 14\n                }\n              }\n            }\n          }\n        }\n      });\n    }\n  }, [data]);\n\n  // Function to generate shades of green\n  const generateShadesOfGreen = (count) => {\n    const colors = [];\n    for (let i = 0; i < count; i++) {\n      const shade = i * (255 / count); // Adjust the shade based on the count\n      colors.push(`rgba(0, ${shade}, 0, 0.7)`); // Adjust the alpha for transparency\n    }\n    return colors;\n  };\n\n  return (\n    <div style={{ width: '100%', height: '200px' }}>\n      <canvas ref={chartRef} />\n    </div>\n  );\n};\n\nexport default TopFarmersBarChart;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}